using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lands_Of_Lore_1_Mega_Trainer
{
    struct ITEM_MAP
    {
        string name;
        UInt16 value;

        public ITEM_MAP(string _name, UInt16 _value)
        {
            this.name = _name;
            this.value = _value;
        }
    }



    partial class LandsOfLoreMegaTrainer_Form
    {
        //Applicable constants ************************************************************************************
        static readonly UInt32 MAX_16 = 0x4444;
        static readonly UInt32 MAX_8  = 0x44;

        //File Check values ***************************************************************************************
        static readonly UInt32 FILE_START_SEQ_ADDRESS = 0x003C;
        static readonly byte[] FILE_START_SEQ = new byte[] { 0x43, 0x44, 0x30, 0x34, 0x00, 0x56, 0x20, 0x43, 0x44, 0x31, 0x2E, 0x30, 0x32, 0x20, 0x44 };

        //Money values ********************************************************************************************
        static readonly UInt16 CROWNS_SIZE = 0x0002;
        static readonly UInt32 ADDR_CROWNS = 0x0464;

        //Player Skills Values ************************************************************************************
        static readonly UInt16 FIGHT_ROGUE_MAGE_SIZE  = 0x0001;
        static readonly UInt16 MIGHT_PROTECTION_SIZE  = 0x0002;
        static readonly UInt16 HEALTH_MAGIC_SIZE      = 0x0002;
        
        static readonly UInt32 P1_ADDR_FIGHT = 0x00B2;
        static readonly UInt32 P2_ADDR_FIGHT = 0x0134;
        static readonly UInt32 P3_ADDR_FIGHT = 0x0186;
        static readonly UInt32 P1_ADDR_MAGE  = 0x00B4;
        static readonly UInt32 P2_ADDR_MAGE  = 0x0136;
        static readonly UInt32 P3_ADDR_MAGE  = 0x0188;
        static readonly UInt32 P1_ADDR_ROGUE = 0x00B3;
        static readonly UInt32 P2_ADDR_ROGUE = 0x0135;
        static readonly UInt32 P3_ADDR_ROGUE = 0x0187;

        static readonly UInt32 P1_ADDR_MIGHT = 0x0065;
        static readonly UInt32 P1_ADDR_PROT  = 0x0083;
        static readonly UInt32 P2_ADDR_MIGHT = 0x00E7;
        static readonly UInt32 P2_ADDR_PROT  = 0x0105;
        static readonly UInt32 P3_ADDR_MIGHT = 0x0169;
        static readonly UInt32 P3_ADDR_PROT  = 0x0187;

        static readonly UInt32 P1_ADDR_HPCUR = 0x0085;
        static readonly UInt32 P1_ADDR_HP    = 0x0087;
        static readonly UInt32 P2_ADDR_HPCUR = 0x0107;
        static readonly UInt32 P2_ADDR_HP    = 0x0109;
        static readonly UInt32 P3_ADDR_HPCUR = 0x0189;
        static readonly UInt32 P3_ADDR_HP    = 0x018B;

        static readonly UInt32 P1_ADDR_MPCUR = 0x0089;
        static readonly UInt32 P1_ADDR_MP    = 0x008B;
        static readonly UInt32 P2_ADDR_MPCUR = 0x010B;
        static readonly UInt32 P2_ADDR_MP    = 0x010D;
        static readonly UInt32 P3_ADDR_MPCUR = 0x018D;
        static readonly UInt32 P3_ADDR_MP    = 0x018F;

        //Player values *******************************************************************************************
        static readonly UInt16 CHAR_P1_ADDR = 0x004E;
        static readonly UInt16 CHAR_P2_ADDR = 0x00D0;
        static readonly UInt16 CHAR_P3_ADDR = 0x0152;

        static readonly byte[][] CHARACTERS = new byte[][]{

            new byte[] { 0x41, 0x6B, 0x27, 0x73, 0x68, 0x65, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x04, 0xF7, 0xFF, 0x00, 0x00, 0x14, 0x0A, 0x02, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x4D, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x11, 0xC2, 0x01, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x4B, 0x69, 0x65, 0x72, 0x61, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF8, 0xFF, 0x00, 0x00, 0x15, 0xE6, 0x01, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x43, 0x6F, 0x6E, 0x72, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xFF, 0x01, 0x00, 0x1A, 0xC2, 0x01, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x42, 0x61, 0x63, 0x63, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x17, 0xF8, 0x01, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x54, 0x69, 0x6D, 0x6F, 0x74, 0x68, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0xC2, 0x01, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x4C, 0x6F, 0x72, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x18, 0xD4, 0x01, 0x53, 0x29, 0x00, 0x00 },
            new byte[] { 0x50, 0x61, 0x75, 0x6C, 0x73, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x19, 0xC2, 0x01, 0x53, 0x29, 0x00, 0x00 },

        };
        
        //Teleport values******************************************************************************************
        static readonly UInt32 TEL_ADDR = 0x0250;

        static readonly byte[][] LOCATIONS = new byte[][] {

            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x80, 0x0D, 0x80, 0x11, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00 },  //GladeStone Keep
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x80, 0x0A, 0x80, 0x03, 0x04, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00 },  //North Forest
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x0E, 0x02, 0x80, 0x0E, 0x80, 0x10, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //South Forest
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xC1, 0x01, 0x80, 0x01, 0x80, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Draracle Cave
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xC9, 0x02, 0x80, 0x09, 0x80, 0x16, 0x04, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x02, 0x00, 0x0A, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Opinwood
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xF6, 0x00, 0x80, 0x16, 0x80, 0x07, 0x04, 0x00, 0x01, 0x00, 0x1B, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0xC0, 0x00, 0x01, 0x00, 0x0C, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Mines
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xF8, 0x02, 0x80, 0x18, 0x80, 0x17, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x11, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //North Opinwood
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x81, 0x02, 0x80, 0x01, 0x80, 0x14, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0B, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Swamp
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x8E, 0x03, 0x80, 0x0E, 0x80, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Yvel Woods
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x4C, 0x02, 0x80, 0x0C, 0x80, 0x12, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //White Tower
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xCB, 0x03, 0x80, 0x0B, 0x80, 0x1E, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x01, 0x00, 0x16, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //City of Yvel
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xD1, 0x03, 0x80, 0x11, 0x80, 0x1E, 0x04, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x01, 0x00, 0x17, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Catwalk Caverns
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x8E, 0x03, 0x80, 0x0E, 0x80, 0x1C, 0x04, 0x00, 0x03, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xB7, 0x00, 0x01, 0x00, 0x1A, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Dungeons
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xB5, 0x01, 0x80, 0x15, 0x80, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x00, 0x01, 0x00, 0x1B, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Castle Lvl 1
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xA8, 0x03, 0x80, 0x08, 0x80, 0x1D, 0x04, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x01, 0x00, 0x1C, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Castle Lvl 2
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xD1, 0x02, 0x80, 0x11, 0x80, 0x16, 0x04, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0x00, 0x01, 0x00, 0x1D, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00 },  //Castle Lvl 3
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0xEB, 0x01, 0x80, 0x0B, 0x80, 0x0F, 0x04, 0x00, 0x03, 0x00, 0x2B, 0x00, 0x01, 0x01, 0x00, 0x03, 0x00, 0xCC, 0x00, 0x00, 0x00, 0x1D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 },  //Scotia

        };
     
        //Inventory Slots Map *************************************************************************************
        static readonly UInt16 INV_ROW_SIZE  = 0x0010;
        static readonly UInt16 INV_HI_SIZE   = 0x0002;
        static readonly UInt16 INV_LO_SIZE   = 0x0002;
        static readonly UInt16 INV_NUM_SLOT  = 0x0030;
        static readonly UInt16 INV_HI_OFFSEt = 0x0003;

        static readonly UInt16 INV_ADDR_LO_START = 0x026A;
        static readonly UInt16 INV_ADDR_HI_START = 0x04A0;  //This is the start of the row

    }

}
